#!/usr/bin/env ruby
# frozen_string_literal: true
require 'digest'
require 'json'
require 'net/http'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'uri'

# Apparent zap2it API
# * 'https://tvlistings.zap2it.com/api/program/overviewDetails'; data = 'programSeriesID=' + EPseries
# * 'http://tvlistings.zap2it.com/api/grid?lineupId=&timespan=3&headendId=' + lineupcode + '&country=' + country + '&device=' + device + '&postalCode=' + zipcode + '&time=' + str(gridtime) + '&pref=-&userId=-'

PROGRAM_NAME = 'tv_grab_zap2it'
VERSION = '0.0.1'
RELEASE =
  begin
    # Compute a truncated SHA-512 digest of the current file and use this as our
    # release identifier. Since the entire program is in a single file, this is
    # guaranteed to provide a unique and stable value for each "build".
    file_data = File.read(Pathname.new(__FILE__).realpath)

    hash = Digest::SHA2
      .new(512)
      .hexdigest(file_data)

    hash[0..8]
  end

XMLTV_DESCRIPTION = 'USA/Canada (zap2it.com)'
XMLTV_CAPABILITIES = [
  'baseline',
  'cache',
].freeze

# Useful time constants for obtaining a number of seconds via multiplication.
class TimeInterval
  SECONDS = 1
  MINUTES = 60 * SECONDS
  HOURS = 60 * MINUTES
  DAYS = 24 * HOURS
  WEEKS = 7 * DAYS
end.freeze

# A builder-style class for parsing and validating arguments in a standardized
# way.
class Arg
  attr_reader :name, :parsers, :value

  def initialize(name, parsers, value)
    @name = name
    @parsers = parsers
    @value = value
  end

  # Create a new builder with the given argument name and nothing else.
  def self.name(
    name # String
  )
    unless name.is_a?(String) && !name.empty?
      raise ArgumentError, 'name must be a non-empty string'
    end

    Arg.new(name.strip, [], nil)
  end

  # Add a parser and return a new `Arg` that inherits its other values, but has
  # another parser added to its list.
  def parser(
    &block # (value: typeof prior parser) => any
  )
    Arg.new(
      @name,
      @parsers + [block],
      @value,
    )
  end

  # Ensures that the passed value is an instance of at least one of the given
  # classes using `#is_a?`.
  def is_a(first_class, *other_classes)
    classes = [first_class, *other_classes].freeze
    self.parser do |value|
      value_is_a = classes.any? do |potential_class|
        value.is_a?(potential_class)
      end

      unless value_is_a
        class_names = classes.map(&:name).join(', ')

        # Don't add "one of" if there's only a single class to check.
        one_of_text =
          if classes.empty?
            ' '
          else
            'one of '
          end

        raise ArgumentError, "{{ name }} must be an instance of #{one_of_text}#{class_names}, but was an instance of #{value.class.name}"
      end

      value
    end
  end

  # Ensures the passed value is one of the given values.
  def one_of(potential_value, *other_values)
    potential_values = [potential_value, *other_values].freeze
    self.parser do |value|
      unless potential_values.include?(value)
        values_text = potential_values.map(&:to_s).join(', ')

        # Don't add "one of" if there's only a single value to check.
        one_of_text =
          if potential_values.empty?
            ' '
          else
            'one of '
          end

        raise ArgumentError, "{{ name }} was expected to be #{one_of_text}#{values_text}, but was #{value}"
      end

      value
    end
  end

  def non_empty
    self.parser do |value|
      if value.empty?
        raise ArgumentError, "{{ name }} must not be empty"
      end

      value
    end
  end

  # Validates that a value is non-`nil` and returns that value.
  def non_nil
    self.parser do |value|
      if value.nil?
        raise ArgumentError, "{{ name }} is required to be non-`nil`"
      end

      value
    end
  end

  def strip
    self.is_a(String).parser do |value|
      value.strip
    end
  end

  def substitute(
    regexp, # Regexp
    substitution # String
  )
    self.is_a(String).parser do |value|
      value.gsub(regexp, substitution)
    end
  end

  def downcase
    self.is_a(String).parser do |value|
      value.downcase
    end
  end

  def upcase
    self.is_a(String).parser do |value|
      value.upcase
    end
  end

  def symbolize
    self.parser do |value|
      value.to_sym
    end
  end

  def int
    self.parser do |value|
      begin
        Integer(value, 10)
      rescue ArgumentError => err
        raise ArgumentError, "{{ name }} of #{value.inspect} is not a valid integer: #{err}"
      end

      value
    end
  end

  def real_path_name
    self.parser do |value|
      Pathname.new(value).realpath
    end
  end

  def uri
    self.parser do |value|
      URI.parse(full_path)
    rescue URI::InvalidURIError => err
      raise ArgumentError, "{{ name }} of #{full_path.inspect} is not a valid URI: #{err}"
    end
  end

  # Thread our value through each configured parser in turn, passing the result
  # of each parser/validator through to the next. Returns the output of the
  # final parser given and sets `.value` to the same.
  #
  # Converts all raised errors into `ArgumentError` instances and re-raises
  # them.
  def parse(
    value # any
  )
    begin
      @value = @parsers.inject(value) do |current_value, parser|
        parser.call(current_value)
      end
    rescue StandardError => err
      new_err_class = ArgumentError

      # Replace any occurence of `{{ name }}` with our configured name to make
      # the errors prettier.
      message = err.message.gsub(/\{\{\s*name\s*\}\}/i, @name)

      # Preserve the original error class name if it's not the one we're
      # "casting" to.
      if err.class.name != new_err_class.name
        message = "#{err.class.name}: #{message}"
      end

      raise new_err_class, message
    end
  end
end

# A provider, something that has a "lineup" associated with it. Typically this
# is something like "Local over-the-air stations" or "AT&T Uverse Cable" or
# something of this nature.
#
# These are only unique given a combination of country, postal code, and
# "headend" id!
class Provider
  attr_reader :country, :id, :postal_code, :name, :type

  def initialize(
    country: nil, # Symbol
    id: nil, # String, the `headendId` value from the API
    name: nil, # String
    postal_code: nil, # String
    type: nil # String
  )
    @id = Arg
      .name('id')
      .non_nil
      .is_a(String)
      .non_empty
      .parse(id)
    @name = Arg
      .name('name')
      .non_nil
      .is_a(String)
      .non_empty
      .parse(name)
    @postal_code = Arg
      .name('postal_code')
      .non_nil
      .non_empty
      .is_a(String)
      .parse(postal_code)
    @type = Arg
      .name('type')
      .non_nil
      .is_a(String)
      .non_empty
      .downcase
      .symbolize
      .parse(type)
    @country = Arg
      .name('country')
      .one_of(:USA, :CAN)
      .parse(country)
  end
end

# A channel in a lineup.
class Channel
  attr_reader :call_sign, :id, :number, :image_url

  def initialize(
    call_sign: nil, # String
    id: nil, # String
    number: nil, # String
    image_url: nil # String
  )
    @call_sign = Arg
      .name('call_sign')
      .non_nil
      .is_a(String)
      .non_empty
      .strip
      .parse(call_sign)
    @id = Arg
      .name('id')
      .non_nil
      .is_a(String)
      .non_empty
      .strip
      .parse(id)
    @number = Arg
      .name('number')
      .non_nil
      .is_a(String)
      .non_empty
      .strip
      .parse(number)
    @image_url = Arg
      .name('image_url')
      .non_nil
      .is_a(String)
      .uri
      .parser do |uri|
        # The URL comes in "naked" and needs to be secure-ified.
        uri.scheme = 'https'

        # The URL _also_ comes in with `w=123`, but if we strip this off then
        # we'll get back the original, full-size picture instead.
        uri.query = nil
      end
      .parse(image_url)
  end

  def to_xml
    raise 'TODO: Implement Channel#to_xml'
  end
end

# One program/timeslot combination in a channel's lineup.
class Program
  attr_reader :channel

  def initialize(
    channel: nil # Channel
  )
    raise 'TODO: Implement Program'
  end
end

# Recursively convert all hashes contained in the given value to `OpenStruct`
# objects, leaving everything else unchanged.
def to_deep_openstruct(
  value # any
)
  if value.is_a?(Hash)
    OpenStruct.new(
      value.each_with_object({}) do |(key, val), all|
        all[key] = to_deep_openstruct(val)
      end
    )
  elsif value.is_a?(Array)
    value.map { |val| to_deep_openstruct(val) }
  else
    value
  end
end

# Parse the configuration from the command line options.
def parse_config_from_args(
  args # An arguments array, typically `ARGV`.
)
  config = OpenStruct.new({
    option_parser: nil, # The `OptionsParser` instance that parsed this config.

    # If `true`, the program should output its description and exit.
    return_description?: false,

    # If `true`, the program should output its XMLTV capabilities and exit.
    return_capabilities?: false,

    # Whether to suppress non-error output.
    quiet?: false,

    # The file to which the final XML should be written. If `nil`, the XML is
    # written to standard output.
    output_filename: nil, # Pathname | nil

    # The number of days of data to obtain, default "all available".
    days_to_download: 999,

    # The number of days from today at which to start downloading data. The
    # default 0 is "today", 1 is "tomorrow", etc.
    day_offset: 0,

    # A file in which to cache downloaded information for future use in lieu of
    # hitting the network. If not provided, no cache is used.
    cache_filename: nil,

    # If specified, downloads and outputs available TV lineups and their ids for
    # later use with the `provider_id` configuration option.
    return_providers?: false,

    # If specified, outputs the program's version info and exits.
    return_version_info?: false,

    # If specified, outputs the program's help text and exits.
    return_help_text?: false,

    # The country for which to fetch data.
    country: nil, # :USA | :CAN

    # The postal code for which to fetch data.
    postal_code: nil, # String

    # The provider id from which to download guide data.
    provider_id: nil, # String

    # If specified, outputs the channel list for the configured provider.
    return_channels?: false,
  })

  option_parser = OptionParser.new do |opts|
    opts.program_name = PROGRAM_NAME
    opts.version = "v#{VERSION}" # Pre-pending `v` makes it look nicer
    opts.release = RELEASE

    ############################################################################
    # BASIC OPTIONS
    ############################################################################

    opts.on(
      '-v',
      '--version',
      'Output program version information and exit.'
    ) do
      config[:return_version_info?] = true
    end

    opts.on(
      '-h',
      '--help',
      'Output program help text and exit.'
    ) do
      config[:return_help_text?] = true
    end

    ############################################################################
    # XMLTV OPTIONS
    ############################################################################

    #
    # Minimum required options
    #

    opts.on(
      '--description',
      'Output our XMLTV description and exit.'
    ) do
      config[:return_description?] = true
    end

    opts.on(
      '--capabilities',
      'Output our supported XMLTV capabilities and exit.'
    ) do
      config[:return_capabilities?] = true
    end

    #
    # `baseline` options
    #

    opts.on(
      '-q',
      '--quiet',
      'Suppress non-error output.'
    ) do
      config[:quiet?] = true
    end

    output_flag = '--output'
    opts.on(
      '-o PATH',
      "#{output_flag} PATH",
      'Write output to this file instead of standard output.'
    ) do |p|
      config.output_filename = Arg
        .name(output_flag)
        .real_path_name
        .parse(p)
    end

    days_flag = '--days'
    opts.on(
      '-d DAYS',
      "#{days_flag} DAYS",
      'The number of days of data to obtain, default "as many as are available"'
    ) do |d|
      config.days_to_download = Arg
        .name(days_flag)
        .int
        .parse(d)
    end

    offset_flag = '--offset'
    opts.on(
      '-f DAYS',
      "#{offset_flag} DAYS",
      'Obtain data starting on the date this many days from today. Default is 0, i.e. "today", 1 is "tomorrow", etc.'
    ) do |o|
      config.day_offset = Arg
        .name(offset_flag)
        .int
        .parse(o)
    end

    config_file_flag = '--config-file'
    opts.on(
      "#{config_file_flag} PATH",
      'The path to the (optional) configuration file for this grabber.'
    ) do |p|
      config_path = Arg
        .name(config_file_flag)
        .real_path_name
        .parse(p)

      # Reads command line options from the given file and parses them.
      #
      # We do this "in line" so that options are applied "logically", i.e.
      # options that come _before_ this flag are overwritten, but options that
      # come _after_ this flag overwrite previously-loaded options.
      opts.load(config_path)
    end

    #
    # `cache` options
    #

    cache_flag = '--cache'
    opts.on(
      "#{cache_flag} PATH",
      'If given, a file in which to cache network requests across invocations.'
    ) do |p|
      config.cache_filename = Arg
        .name(cache_flag)
        .real_path_name
        .parse(p)
    end

    ############################################################################
    # CONFIGURATION OPTIONS
    ############################################################################

    country_flag = '--country'
    opts.on(
      '-c COUNTRY',
      "#{country_flag} COUNTRY",
      'The country for which to fetch data, one of USA or CAN.'
    ) do |s|
      config.country = Arg
        .name(country_flag)
        .strip
        .one_of('USA', 'CAN')
        .symbolize
        .parse(s)
    end

    postal_code_flag = '--postal-code'
    opts.on(
      '-p CODE',
      "#{postal_code_flag} CODE",
      'The postal code for which to fetch data. Something like `12345` for the USA or `A1A 1A1` for Canada.`'
    ) do |s|
      config.postal_code = Arg
        .name(postal_code_flag)
        .strip
        .substitute(/\s+/, ' ') # Condense spaces for uniformity
        .non_empty
        .parse(s)
    end

    show_provider_info_flag = '--show-providers'
    opts.on(
      show_provider_info_flag,
      "Output provider information for the given #{country_flag} and #{postal_code_flag} values."
    ) do |s|
      config[:return_providers?] = true
    end

    provider_id_flag = '--provider-id'
    opts.on(
      '-r ID',
      "#{provider_id_flag} ID",
      "The provider id for which to fetch data, obtained with the help of the #{show_provider_info_flag} flag."
    ) do |s|
      config.provider_id = Arg
        .name(provider_id_flag)
        .strip
        .non_empty
        .parse(s)
    end

    show_channels_flag = '--show-channels'
    opts.on(
      show_channels_flag,
      "Output the channels for the given #{country_flag}, #{postal_code_flag}, and #{provider_id_flag} values.",
    ) do
      config[:return_channels?] = true
    end
  end

  # It's useful for external things to have access to this at times, e.g. for
  # printing help text.
  config.option_parser = option_parser

  # Parse the given arguments into our config object.
  option_parser.parse(args)

  config
end

# Makes a GET request to the secure `tvlistings.zap2it.com` domain and returns
# the JSON response converted to a deep `OpenStruct`. If the request fails or
# its response body can't be parsed, raises an `IOError`.
def fetch(
  *path, # Array<any>
  query: {}, # Hash<Symbol, any>
  cache_filename: nil, # Pathname | nil
  cache_ttl_seconds: nil # Integer | nil
) # Hash<Symbol, JSON> | Array<JSON>
  full_path = File.join(
    'https://tvlistings.zap2it.com',
    *path.map(&:to_s),
  )

  uri =
    begin
      u = URI.parse(full_path)
      u.query = URI.encode_www_form(query.to_a)
      u
    rescue URI::InvalidURIError => err
      raise ArgumentError, "Invalid URI from path #{full_path.inspect}: #{err}"
    end

  # TODO: Read from the cache instead if one was specified!

  res = Net::HTTP.get_response(uri)
  unless res.is_a?(Net::HTTPSuccess)
    raise IOError, "Got HTTP #{response.code} from #{uri}: #{response.message}"
  end

  json =
    begin
      raw_json = res.body
      JSON.parse(raw_json, symbolize_names: true)
    rescue JSON::ParserError => err
      raise IOError, "Failed to parse HTTP response from #{uri}: #{err}"
    end

  to_deep_openstruct(json)
end

# Downloads and returns lineup (i.e. provider) data for the given country and
# postal code.
def fetch_providers(
  country, # :USA | :CAN
  postal_code, # String, e.g. `12345` or `A1A 1A1`
  cache_filename: nil # Pathname | nil
) # Array<Provider>
  lineup_json = fetch(
    'gapzap_webapi/api/Providers/getPostalCodeProviders',
    country,
    postal_code,
    'gapzap/en',

    # This response is expected to change very infrequently, if ever.
    cache_ttl_seconds: 1 * TimeInterval::WEEKS,
    cache_filename: cache_filename,
  )

  lineup_json
    .Providers
    .sort_by { |p| [p.type, p.name] } # Do a human-friendly sort for display
    .map do |p|
      Provider.new(
        country: country,
        id: p.headendId,
        name: p.name,
        postal_code: postal_code,
        type: p.type,
      )
    end
end

# Fetch overall provider info and return the provider that corresponds to the
# given parameters. If no provider is found, returns `nil`.
def fetch_provider(
  country, # :USA | :CAN
  postal_code, # String
  provider_id, # String
  cache_filename: nil
) # Provider | nil
  providers = fetch_providers(
    country,
    postal_code,
    cache_filename: cache_filename,
  )

  providers.find do |provider|
    (
      provider.country = country &&
      provider.postal_code = postal_code &&
      provider.id = provider_id
    )
  end
end

# Downloads and returns all the data for the given date, if possible.
def fetch_lineup(
  provider, # Provider
  date, # Date
  cache_filename: nil # Pathname | nil
)
  raise 'TODO: fetch_data_for_date'
end

# Formats the given data nicely for display in the terminal as a table and
# returns the result.
#
# No more columns than those given will be displayed. If any row contains too
# few values for the given columns, empty strings will be displayed in the
# "holes".
def display_table(
  columns, # Array<Symbol | String>
  rows, # Array<Tuple<any>>
  column_padding: 2 # Integer, the space between columns
) # String
  # Turn everything into a string and resize all the rows to be no longer than
  # the number of columns. Any "missing" columns will be omitted from the output
  # entirely.
  max_column_value_lengths = columns.map { 0 }
  prepared_rows = [columns, *rows].map do |row|
     row
       .slice(0, columns.length) # Truncate to column length
       .map(&:to_s) # Stringify contents
       .each_with_index do |value, column_index| # Update max value size
         value_length = value.length
         if max_column_value_lengths[column_index] < value_length
           max_column_value_lengths[column_index] = value_length
         end
       end
  end

  column_padder = ' ' * column_padding
  prepared_rows.each_with_index.map do |row, index|
    row
      .each_with_index
      .map { |r, i| r.ljust(max_column_value_lengths[i]) }
      .join(column_padder)
      .strip
  end.join("\n")
end

# Returns a string for terminal output representing provider information.
def display_providers(
  country, # :USA | :CAN
  postal_code # String
) # String
  providers = fetch_providers(country, postal_code)

  display_table(
    [:NAME, :TYPE, :ID],
    providers.map { |p| [p.name, p.type, p.id] },
  )
end

def display_channels(
  country, # :USA | :CAN
  postal_code, # String
  provider_id # String
) # String
  # TODO: Write provider table!
end

def main!
  config = parse_config_from_args(ARGV).freeze

  # Output program version information and exit if specified.
  if config.return_version_info?
    $stdout.puts(config.option_parser.ver())
    return
  end

  # Output program help text and exit if specified.
  if config.return_help_text?
    $stdout.puts(config.option_parser.help())
    return
  end

  # Output our XMLTV description and exit if specified.
  if config.return_description?
    $stdout.puts(XMLTV_DESCRIPTION)
    return
  end

  # Output our XMLTV capabilities and exit if specified.
  if config.return_capabilities?
    XMLTV_CAPABILITIES.each do |capability|
      $stdout.puts(capability)
    end
    return
  end

  # Download and print out the configured lineup information, then exit.
  if config.return_providers?
    country = Arg
      .name('country')
      .non_nil
      .parse(config.country)

    postal_code = Arg
      .name('postal code')
      .non_nil
      .parse(config.postal_code)

    $stdout.puts(display_providers(country, postal_code))
    return
  end

  if config.return_channels?
    country = Arg
      .name('country')
      .non_nil
      .parse(config.country)

    postal_code = Arg
      .name('postal code')
      .non_nil
      .parse(config.postal_code)

    provider_id = Arg
      .name('provider id')
      .non_nil
      .parse(config.provider_id)

    $stdout.puts(display_channels(country, postal_code, provider_id))
    return
  end
end

if __FILE__ == $0
  main!
end
